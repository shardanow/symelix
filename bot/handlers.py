from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from bot.keyboards import (
    mood_keyboard,
    habit_keyboard,
    yes_no_keyboard,
    energy_keyboard,
    headache_keyboard
)
from db.database import get_db
from db import crud
from config import TELEGRAM_BOT_TOKEN

from core.summary import get_today_moods, get_today_habits, get_today_health
from ai.analyzer import analyze_day
from datetime import datetime, timedelta


router = Router()


# === –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM ===
class MoodStates(StatesGroup):
    ask_comment = State()
    waiting_for_comment = State()

class HabitStates(StatesGroup):
    ask_comment = State()
    waiting_for_comment = State()

class HealthStates(StatesGroup):
    waiting_for_energy = State()
    waiting_for_sleep = State()
    waiting_for_headache = State()
    ask_comment = State()
    waiting_for_comment = State()



# === –°—Ç–∞—Ä—Ç ===
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ì–æ—Ç–æ–≤ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ç–≤–æ—ë —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ.")


# === –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ===
@router.message(Command("mood"))
async def cmd_mood(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ —Å–≤–æ—ë —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:", reply_markup=mood_keyboard)

@router.message(lambda msg: any(x in msg.text for x in ["üòä", "üòê", "üò¢", "üò°", "ü§Ø"]))
async def mood_chosen(message: types.Message, state: FSMContext):
    await state.update_data(mood=message.text)
    await message.answer("–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é?", reply_markup=yes_no_keyboard)
    await state.set_state(MoodStates.ask_comment)

@router.message(MoodStates.ask_comment)
async def mood_comment_decision(message: types.Message, state: FSMContext):
    if message.text.lower() == "–Ω–µ—Ç":
        data = await state.get_data()
        async for session in get_db():
            await crud.save_mood(session, message.from_user.id, data["mood"], None)
        await message.answer("–ó–∞–ø–∏—Å–∞–ª —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! üëç", reply_markup=ReplyKeyboardRemove())
        await state.clear()
    elif message.text.lower() == "–¥–∞":
        await message.answer("–•–æ—Ä–æ—à–æ, –Ω–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
        await state.set_state(MoodStates.waiting_for_comment)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")

@router.message(MoodStates.waiting_for_comment)
async def mood_comment(message: types.Message, state: FSMContext):
    data = await state.get_data()
    comment = message.text.strip()

    async for session in get_db():
        await crud.save_mood(session, message.from_user.id, data["mood"], comment)

    await message.answer("–ó–∞–ø–∏—Å–∞–ª —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º! üìù", reply_markup=ReplyKeyboardRemove())
    await state.clear()


# === –ü—Ä–∏–≤—ã—á–∫–∞ ===
@router.message(Command("habit"))
async def cmd_habit(message: types.Message):
    await message.answer("–û—Ç–º–µ—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É:", reply_markup=habit_keyboard)

@router.message(lambda msg: any(x in msg.text for x in ["üíß", "üíä", "üö∂‚Äç‚ôÇÔ∏è", "üßò"]))
async def habit_chosen(message: types.Message, state: FSMContext):
    await state.update_data(habit=message.text.strip())
    await message.answer("–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø—Ä–∏–≤—ã—á–∫–µ?", reply_markup=yes_no_keyboard)
    await state.set_state(HabitStates.ask_comment)

@router.message(HabitStates.ask_comment)
async def habit_comment_decision(message: types.Message, state: FSMContext):
    if message.text.lower() == "–Ω–µ—Ç":
        data = await state.get_data()
        async for session in get_db():
            await crud.save_habit(session, message.from_user.id, data["habit"], None)
        await message.answer("–ü—Ä–∏–≤—ã—á–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ üí™", reply_markup=ReplyKeyboardRemove())
        await state.clear()
    elif message.text.lower() == "–¥–∞":
        await message.answer("–•–æ—Ä–æ—à–æ, –Ω–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
        await state.set_state(HabitStates.waiting_for_comment)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")

@router.message(HabitStates.waiting_for_comment)
async def habit_comment(message: types.Message, state: FSMContext):
    data = await state.get_data()
    comment = message.text.strip()

    async for session in get_db():
        await crud.save_habit(session, message.from_user.id, data["habit"], comment)

    await message.answer("–ü—Ä–∏–≤—ã—á–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º üí¨", reply_markup=ReplyKeyboardRemove())
    await state.clear()

# === –ö–æ–º–∞–Ω–¥–∞ /health ===
@router.message(Command("health"))
async def cmd_health(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞ —Å–∫–æ–ª—å–∫–æ —Ç—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å —Å–≤–æ—é —ç–Ω–µ—Ä–≥–∏—é –æ—Ç 1 –¥–æ 10?", reply_markup=energy_keyboard)
    await state.set_state(HealthStates.waiting_for_energy)

@router.message(HealthStates.waiting_for_energy)
async def set_energy(message: types.Message, state: FSMContext):
    try:
        energy = int(message.text)
        if not (1 <= energy <= 10):
            raise ValueError
        await state.update_data(energy_level=energy)
        await message.answer("–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ç—ã —Å–ø–∞–ª(–∞) –ø—Ä–æ—à–ª–æ–π –Ω–æ—á—å—é? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 6.5)")
        await state.set_state(HealthStates.waiting_for_sleep)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 –∏–∑ –∫–Ω–æ–ø–æ–∫.")

@router.message(HealthStates.waiting_for_sleep)
async def set_sleep(message: types.Message, state: FSMContext):
    try:
        hours = float(message.text)
        await state.update_data(sleep_hours=hours)
        await message.answer("–ë—ã–ª–∞ –ª–∏ —É —Ç–µ–±—è –≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å —Å–µ–≥–æ–¥–Ω—è?", reply_markup=headache_keyboard)
        await state.set_state(HealthStates.waiting_for_headache)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ —Å–Ω–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: 7.5")

@router.message(HealthStates.waiting_for_headache)
async def set_headache(message: types.Message, state: FSMContext):
    answer = message.text.lower()
    if answer not in ["–¥–∞", "–Ω–µ—Ç"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –î–∞ –∏–ª–∏ –ù–µ—Ç.")
        return

    headache = answer == "–¥–∞"
    await state.update_data(headache=headache)
    await message.answer("–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—é?", reply_markup=yes_no_keyboard)
    await state.set_state(HealthStates.ask_comment)


@router.message(HealthStates.ask_comment)
async def handle_comment_decision(message: types.Message, state: FSMContext):
    if message.text.lower() == "–Ω–µ—Ç":
        data = await state.get_data()
        async for session in get_db():
            await crud.save_health(
                session=session,
                user_id=message.from_user.id,
                energy_level=data["energy_level"],
                headache=data["headache"],
                sleep_hours=data["sleep_hours"],
                comment=None
            )
        await message.answer("–°–ø–∞—Å–∏–±–æ! –ó–∞–ø–∏—Å–∞–ª —Ç–≤–æ—ë —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ ü©∫", reply_markup=ReplyKeyboardRemove())
        await state.clear()
    elif message.text.lower() == "–¥–∞":
        await message.answer("–•–æ—Ä–æ—à–æ, –Ω–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
        await state.set_state(HealthStates.waiting_for_comment)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")


@router.message(HealthStates.waiting_for_comment)
async def save_health_entry(message: types.Message, state: FSMContext):
    data = await state.get_data()
    comment = None if message.text.lower() == "–Ω–µ—Ç" else message.text.strip()

    async for session in get_db():
        await crud.save_health(
            session=session,
            user_id=message.from_user.id,
            energy_level=data["energy_level"],
            headache=data["headache"],
            sleep_hours=data["sleep_hours"],
            comment=comment
        )

    await message.answer("–°–ø–∞—Å–∏–±–æ! –ó–∞–ø–∏—Å–∞–ª —Ç–≤–æ—ë —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ ü©∫", reply_markup=ReplyKeyboardRemove())
    await state.clear()


# === –°–≤–æ–¥–∫–∞ ===
@router.message(Command("summary"))
async def cmd_summary(message: types.Message):
    async for session in get_db():
        moods = await get_today_moods(session, message.from_user.id)
        habits = await get_today_habits(session, message.from_user.id)
        health_entries = await get_today_health(session, message.from_user.id)
        weather_today = await crud.get_weather(session, datetime.utcnow().date(), "today")
        weather_tomorrow = await crud.get_weather(session, datetime.utcnow().date() + timedelta(days=1), "tomorrow")
        geo_today = await crud.get_geomagnetic(session, datetime.utcnow().date(), "today")
        geo_tomorrow = await crud.get_geomagnetic(session, datetime.utcnow().date() + timedelta(days=1), "tomorrow")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        mood_data = [{"mood": m.mood, "comment": m.comment} for m in moods]
        habit_data = [{"habit": h.habit_name, "comment": h.comment} for h in habits]
        health_data = [{
            "energy_level": h.energy_level,
            "headache": h.headache,
            "sleep_hours": h.sleep_hours,
            "comment": h.comment
        } for h in health_entries]

    if not mood_data and not habit_data:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è üôÉ")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ GPT
    analysis = await analyze_day(
        mood_data,
        habit_data,
        health_data,
        weather_today.to_dict() if weather_today else {},
        weather_tomorrow.to_dict() if weather_tomorrow else {},
        geo_today.to_dict() if geo_today else {},
        geo_tomorrow.to_dict() if geo_tomorrow else {},
    )
    await message.answer(f"{analysis}", parse_mode="HTML")


# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ===
def register_handlers(dp):
    dp.include_router(router)
